package org.rkoubsky.streams;

import lombok.extern.log4j.Log4j2;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;
import java.util.stream.IntStream;
import java.util.stream.Stream;

/**
 * @author Radek Koubsky
 */
@Log4j2
public class BuildingStreamsDemo {

    public static void main(String[] args) {
        List<Integer> ints = Arrays.asList(0, 1, 2, 3, 4);

        Stream<Integer> stream1 = ints.stream();
        stream1.forEach(i -> log.info(i));

        Stream<Integer> stream2 = Stream.of(0, 1, 2, 3, 4);
        stream2.forEach(i -> log.info(i));

        log.info("Constant stream generated using Stream.generate:");
        Stream<String> strings = Stream.generate(() -> "string");
        strings.limit(4).forEach(s -> log.info(s));

        log.info("Growing stream generated using Stream.iterate:");
        Stream<String> strings2 = Stream.iterate(">", s -> s + ">");
        strings2.limit(5).forEach(s -> log.info(s));

        log.info("Stream of random integers generated by ThreadLocalRandom.ints");
        IntStream randomInts = ThreadLocalRandom.current().ints();
        randomInts.limit(5).forEach(i -> log.info(i));
    }
}
